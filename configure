#!/bin/bash
## BM++ config script

function print_help
{ 
    echo "" ;
    echo -e "\x1B[32mBM++ Configuration Options:\033[0m" >&2 ;
    echo "-c    Coverage build" ;
    echo "-d    Development build" ;
    echo "-g    Debugging build (optimization flags set to -O0 -g)" ;
    echo "-h    Print help" ;
    echo "-i    Install path (default: current directory)" ;
    echo "        Example: /usr/local" ;
    echo "-m    Specify the BLAS and Lapack libraries to link against" ; 
    echo "        Examples: -m \"-lopenblas\" or -m \"-framework Accelerate\"" ;
    echo "-o    Compiler optimization options; defaults to:" ;
    echo "        -O3 -march=native -ffp-contract=fast -flto -DARMA_NO_DEBUG" ;
    echo "-p    Enable OpenMP parallelization features" ;
    echo "" ;
}

while getopts hcdgi:m:o:p option; do
    case "${option}" in
        h) print_help; exit 2;;
        c) BM_COVERAGE_BUILD="y";;
        d) BM_DEV_BUILD="y";;
        g) BM_DEBUG_BUILD="y";;
        i) BM_INSTALL_PATH=${OPTARG};;
        m) BM_MATRIX_OPS=${OPTARG};;
        o) BM_OPT=${OPTARG};;
        p) BM_PARALLEL="y";;
        ?) print_help; exit 2;;
    esac
done

if [ -z ${CC+x} ]; then 
    CC=gcc
fi
if [ -z ${CXX+x} ]; then 
    CXX=g++
fi
if [ -z ${FC+x} ]; then 
    FC=gfortran
fi

#

echo ""
echo -e "\x1B[32mBM++ Configuration...\033[0m" >&2 ;
echo ""

# compiler checks

IS_DARWIN=$($CXX -dumpmachine 2>&1 | grep -i -c "darwin")
GCC_COMPILER=$($CXX --version 2>&1 | grep -i -c -E "gcc")
CLANG_COMPILER=$($CXX --version 2>&1 | grep -i -c -E "clang")
APPLE_COMPILER=$($CXX --version 2>&1 | grep -i -c -E 'apple llvm')

# get working directory
WDIR=${PWD}

# look for Armadillo
if [ -z ${ARMA_INCLUDE_PATH+x} ]; then
    
    declare -a ARMA_DIRS=("${WDIR}/include" "/usr/include" "/usr/local/include" "/opt/include" "/opt/local/include")
    ARMA_INCLUDE_PATH=

    for i in "${ARMA_DIRS[@]}"; do
        if [ -f "$i"/armadillo ]; then 
            ARMA_INCLUDE_PATH="$i"
            break
        fi
    done

    if [[ $ARMA_INCLUDE_PATH == "" ]]; then
        echo -e "\x1B[31m  - note: cannot find Armadillo files. Cloning from GitLab\033[0m" >&2 ;
        echo ""

        mkdir ${WDIR}/arma_tmp
        git clone -b unstable --single-branch https://gitlab.com/conradsnicta/armadillo-code.git ${WDIR}/arma_tmp > /dev/null 2>&1
        mv ${WDIR}/arma_tmp/include/* ${WDIR}/include
        rm -rf ${WDIR}/arma_tmp
        ARMA_INCLUDE_PATH="./include"
    fi
fi

# set build and optimization flags

if [[ "${BM_COVERAGE_BUILD}" == "y" ]]; then 
    if [ "$GCC_COMPILER" -eq "1" ]; then
        BM_OPT_FLAGS="-g -O0 --coverage -fno-inline -fno-inline-small-functions -fno-default-inline"
    else # clang:
        BM_OPT_FLAGS="-g -O0 --coverage -fno-inline"
    fi
elif [[ "${BM_DEBUG_BUILD}" == "y" ]]; then
    BM_OPT_FLAGS="-O0 -g"
else
    if [[ "${BM_OPT}" == "" ]]; then
        BM_OPT_FLAGS="-O3 -march=native -ffp-contract=fast -flto -DNDEBUG -DARMA_NO_DEBUG"
    else
        BM_OPT_FLAGS="${BM_OPT}"
    fi

    if [[ "${BM_PARALLEL}" == "y" ]]; then
        BM_OPT_FLAGS="${BM_OPT_FLAGS} -fopenmp"
    fi
fi

BM_WARN_FLAGS="-Wall"

# shared library name and install path

BM_SHLIB_NAME="liboptim.so"

if [[ "${BM_INSTALL_PATH}" == "" ]]; then
    BM_INSTALL_PATH="${WDIR}"
    BM_INSTALL_LIB_PATH="${WDIR}"
else
    BM_INSTALL_LIB_PATH="${BM_INSTALL_PATH}/lib"
fi

if [[ $OSTYPE == darwin* ]] ; then

    BM_SHLIB_FLAGS="-dynamiclib -install_name ${BM_INSTALL_LIB_PATH}/${BM_SHLIB_NAME} -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress"
    BM_BLAS_LAPACK="-framework Accelerate"

elif [[ $OSTYPE == *linux* ]] ; then

    BM_OPT_FLAGS="-fPIC ${BM_OPT_FLAGS}"
    BM_SHLIB_FLAGS="-fPIC -shared -L${BM_INSTALL_LIB_PATH} -Wl,-Bsymbolic-functions -Wl,-z,relro"

    BM_BLAS_LAPACK="-lblas -llapack"
else
    BM_BLAS_LAPACK="-lblas -llapack"
fi

if [[ !(-z ${BM_MATRIX_OPS+x}) ]]; then
    BM_BLAS_LAPACK="${BM_MATRIX_OPS}"
fi

if [ "$IS_DARWIN" -eq "1" ] && [ "$GCC_COMPILER" -eq "1" ]; then
    BM_OPT_FLAGS="-Wa,-q ${BM_OPT_FLAGS}"
fi

# final optimization checks

if [[ "${BM_COVERAGE_BUILD}" == "y" ]]; then 
    BM_SHLIB_FLAGS="--coverage ${BM_SHLIB_FLAGS}"
else
    BM_SHLIB_FLAGS="${BM_OPT_FLAGS} ${BM_SHLIB_FLAGS}"
fi

#
# final print:

echo "  - OS:            ${OSTYPE}"
echo "  - C++ compiler:  ${CXX}"

if [[ "${BM_DEV_BUILD}" == "y" ]]; then
    echo "  - Build version: development"
elif [[ "${BM_COVERAGE_BUILD}" == "y" ]]; then
    echo "  - Build version: coverage"
elif [[ "${BM_DEBUG_BUILD}" == "y" ]]; then
    echo "  - Build version: debug"
else
    echo "  - Build version: release"
fi

echo ""

echo "  - ARMA_INCLUDE_PATH set to:"
echo "    ${ARMA_INCLUDE_PATH}"
echo "  - BLAS and Lapack libraries set to:"
echo "    ${BM_BLAS_LAPACK}"

echo ""

if [[ "${BM_PARALLEL}" == "y" ]]; then
    echo -e "  - OpenMP features: \x1B[32menabled\033[0m" >&2 ;
else
    echo -e "  - OpenMP features: \x1B[31mdisabled\033[0m" >&2 ;
fi

echo "  - optimization flags:"
echo "    ${BM_OPT_FLAGS}"

echo ""

echo "  - BM++ install path:"
echo "    ${BM_INSTALL_PATH}"

echo ""
echo "  - Additional notes:"

if [ "$APPLE_COMPILER" -eq "1" ] && [[ "${BM_PARALLEL}" == "y" ]]; then
    echo -e "    \x1B[31m- You have enabled OpenMP, but your C++ compiler does not\033[0m" >&2 ;
    echo -e "    \x1B[31m  support this feature!\033[0m" >&2 ;
fi

if [ "$IS_DARWIN" -eq "1" ] && [ "$GCC_COMPILER" -eq "1" ]; then
    echo "    - To enable AVX features, your compiler will use the Apple LLVM"
    echo "      assembler"
fi

echo ""
echo -e "\x1B[32mConfiguration completed. Creating Makefile... \c\033[0m" >&2 ;

sed -e "s|@CC@|${CC}|" \
    -e "s|@CXX@|${CXX}|" \
    -e "s|@FC@|${FC}|" \
    -e "s|@ARMA_INCLUDE_PATH@|${ARMA_INCLUDE_PATH}|" \
    -e "s|@BM_BLAS_LAPACK@|${BM_BLAS_LAPACK}|" \
    -e "s|@BM_WARN_FLAGS@|${BM_WARN_FLAGS}|" \
    -e "s|@BM_OPT_FLAGS@|${BM_OPT_FLAGS}|" \
    -e "s|@BM_SHLIB_NAME@|${BM_SHLIB_NAME}|" \
    -e "s|@BM_SHLIB_FLAGS@|${BM_SHLIB_FLAGS}|" \
    -e "s|@BM_INSTALL_PATH@|${BM_INSTALL_PATH}|" \
    Makefile.in > Makefile

echo -e "\x1B[32mdone.\033[0m" >&2 ;
echo ""