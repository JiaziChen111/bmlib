#!/bin/bash
## BM++ tests config script

# inputs
while getopts cdgm:o:p option; do
    case "${option}" in
        c) BM_COVERAGE="y";;
        d) BM_BUILD="dev";;
        g) BM_DEBUG="y";;
        m) BM_MATRIX_OPS=${OPTARG};;
        o) BM_OPT=${OPTARG};;
        p) BM_PARALLEL="y";;
    esac
done

if [ -z ${CC+x} ]; then 
    CC=gcc
fi
if [ -z ${CXX+x} ]; then 
    CXX=g++
fi
if [ -z ${FC+x} ]; then 
    FC=gfortran
fi

# compiler checks

IS_DARWIN=$($CXX -dumpmachine 2>&1 | grep -i -c "darwin")
GCC_COMPILER=$($CXX --version 2>&1 | grep -i -c -E "gcc")
# APPLE_COMPILER=$($CXX --version 2>&1 | grep -i -c -E 'apple llvm')

# announcements

echo ""

if [[ "${BM_COVERAGE}" == "y" ]]; then 
    echo "BM: coverage build"
fi

if [[ "${BM_BUILD}" == "dev" ]]; then
    echo "BM: dev version"
fi

if [[ "${BM_DEBUG}" == "y" ]]; then
    echo "BM: debug build"
fi

# get working directory
WDIR=${PWD}

# look for Armadillo
if [ -z ${ARMA_INCLUDE_PATH+x} ]; then
    
    declare -a ARMA_DIRS=("${WDIR}/../../../include" "/usr/include" "/usr/local/include" "/opt/include" "/opt/local/include")
    ARMA_INCLUDE_PATH=

    for i in "${ARMA_DIRS[@]}"; do
        if [ -f "$i"/armadillo ]; then 
            ARMA_INCLUDE_PATH="$i"
            break
        fi
    done

    if [[ $ARMA_INCLUDE_PATH == "" ]]; then
        echo ""
        echo "BM tests: cannot find the armadillo library."
        echo ""
        exit 1
    fi
fi

echo "BM Tests: ARMA_INCLUDE_PATH set to ${ARMA_INCLUDE_PATH}"

# set build and optimization flags
# set build and BMization flags

if [[ "${BM_COVERAGE}" == "y" ]]; then 
    BM_OPT_FLAGS="-g -O0 --coverage -fno-inline -fno-inline-small-functions -fno-default-inline"
else
    if [[ "${BM_OPT}" == "" ]]; then
        BM_OPT_FLAGS="-O3 -march=native -ffp-contract=fast -flto -DARMA_NO_DEBUG -DARMA_USE_CXX11"
    else
        BM_OPT_FLAGS="${BM_OPT}"
    fi

    if [[ "${BM_PARALLEL}" == "y" ]]; then
        echo "BM: using OpenMP"
        BM_OPT_FLAGS="${BM_OPT_FLAGS} -fopenmp -DBM_USE_OMP -DARMA_USE_OPENMP"
    fi
fi

BM_WARN_FLAGS="-Wall"

# shared library name and install path

BM_SHLIB_NAME="bm"

# dev build

if [[ "${BM_BUILD}" == "dev" ]]; then
    cd ../../..
    BM_INCLUDE_PATH=${PWD}/include
    BM_INSTALL_PATH=${PWD}
    cd ${WDIR}
else
    BM_INCLUDE_PATH="/usr/local/include/BM++"
    BM_INSTALL_PATH="/usr/local/lib"
fi

# BLAS and LAPACK settings

if [[ !(-z ${BM_MATRIX_OPS+x}) ]]; then
    BM_BLAS_LAPACK="${BM_MATRIX_OPS}"
    echo ""
    echo "BM Tests: BLAS and Lapack libraries set to ${BM_BLAS_LAPACK}"
else
    if [[ $OSTYPE == darwin* ]] ; then
        BM_BLAS_LAPACK="-framework Accelerate"
    elif [[ $OSTYPE == *linux* ]] ; then
        BM_BLAS_LAPACK="-lblas -llapack"
    elif [[ $OSTYPE == *cygwin* ]] ; then
        BM_BLAS_LAPACK="-lblas -llapack"
    else
        BM_BLAS_LAPACK="-lblas -llapack"
    fi
fi

if [[ !(-z ${BM_MATRIX_OPS+x}) ]]; then
    BM_BLAS_LAPACK="${BM_MATRIX_OPS}"
    echo ""
    echo "BM: BLAS and Lapack libraries set to ${BM_BLAS_LAPACK}"
fi

if [ "$IS_DARWIN" -eq "1" ] && [ "$GCC_COMPILER" -eq "1" ]; then
    echo ""
    echo "BM: To enable AVX features, your compiler will use the Apple LLVM assembler"
    BM_OPT_FLAGS="-Wa,-q ${BM_OPT_FLAGS}"
fi

# final optimization checks

if [[ "${BM_DEBUG}" == "y" ]]; then
    BM_OPT_FLAGS="-O0 -g"
fi

if [[ "${BM_COVERAGE}" == "y" ]]; then 
    BM_SHLIB_FLAGS="--coverage ${BM_SHLIB_FLAGS}"
else
    BM_SHLIB_FLAGS="${BM_OPT_FLAGS} ${BM_SHLIB_FLAGS}"
fi

BM_OPT_FLAGS+=" -DSTATS_GO_INLINE"

echo "BM: optimization flags set to: ${BM_OPT_FLAGS}"

echo ""
# create Makefile

sed -e "s|@CC@|${CC}|" \
    -e "s|@CXX@|${CXX}|" \
    -e "s|@FC@|${FC}|" \
    -e "s|@ARMA_INCLUDE_PATH@|${ARMA_INCLUDE_PATH}|" \
    -e "s|@BM_BLAS_LAPACK@|${BM_BLAS_LAPACK}|" \
    -e "s|@BM_WARN_FLAGS@|${BM_WARN_FLAGS}|" \
    -e "s|@BM_OPT_FLAGS@|${BM_OPT_FLAGS}|" \
    -e "s|@BM_SHLIB_NAME@|${BM_SHLIB_NAME}|" \
    -e "s|@BM_INCLUDE_PATH@|${BM_INCLUDE_PATH}|" \
    -e "s|@BM_INSTALL_PATH@|${BM_INSTALL_PATH}|" \
    Makefile.in > Makefile
